package com.sprint.app.model;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Column;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * Represents a User entity in the system.
 * A user has various attributes such as username, email, password, and profile picture.
 * It can have many related posts, friends, comments, notifications, likes, messages, and groups.
 * The User entity is mapped to a table in the database.
 */
@Entity
public class Users {

  

	/**
     * The unique identifier for the user.
     * This field is auto-generated by the database using the strategy {@link GenerationType.IDENTITY}.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int userID;

    /**
     * The username of the user.
     * The username cannot be blank and should not exceed 50 characters.
     */
    @NotBlank(message = "Username cannot be blank")
    @Size(max = 50, message = "Username should not exceed 50 characters")
    private String username;

    /**
     * The email of the user.
     * The email cannot be blank, should be valid, and must not exceed 100 characters.
     */
    @NotBlank(message = "Email cannot be blank")
    @Email(message = "Email should be valid")
    @Size(max = 100, message = "Email should not exceed 100 characters")
    private String email;

    /**
     * The password of the user.
     * The password cannot be blank and should be between 8 and 50 characters.
     */
    @NotBlank(message = "Password cannot be blank")
    @Size(min = 8, max = 50, message = "Password should be between 8 and 50 characters")
    private String password;

    /**
     * The profile picture of the user.
     * This field is stored as a BLOB (binary large object).
     */
    @Column(columnDefinition = "BLOB")
    private String profile_picture;

    /**
     * A list of posts created by the user.
     * This is a one-to-many relationship with the {@link Posts} entity.
     */
    @OneToMany(mappedBy = "user")
    List<Posts> posts = new ArrayList<>();

    /**
     * A set of friends sent by the user.
     * This is a one-to-many relationship with the {@link Friends} entity.
     */
//    @OneToMany(mappedBy = "user1")
//    Set<Friends> friendsent;

    /**
     * A set of friends received by the user.
     * This is a one-to-many relationship with the {@link Friends} entity.
     */
//    @OneToMany(mappedBy = "user2")
//    Set<Friends> friendsrec;

    /**
     * A list of comments made by the user.
     * This is a one-to-many relationship with the {@link Comments} entity.
     */
    @OneToMany(mappedBy = "users")
    List<Comments> comments = new ArrayList<>();

    /**
     * A list of notifications for the user.
     * This is a one-to-many relationship with the {@link Notifications} entity.
     */
//    @OneToMany(mappedBy = "user")
//    List<Notifications> notification = new ArrayList<>();

    /**
     * A list of likes made by the user.
     * This is a one-to-many relationship with the {@link Likes} entity.
     */
    @OneToMany(mappedBy = "user")
    List<Likes> likes = new ArrayList<>();

    /**
     * A list of messages sent by the user.
     * This is a one-to-many relationship with the {@link Messages} entity.
     */
//    @OneToMany(mappedBy = "sender")
//    List<Messages> sentmsg = new ArrayList<>();

    /**
     * A list of messages received by the user.
     * This is a one-to-many relationship with the {@link Messages} entity.
     */
//    @OneToMany(mappedBy = "receiver")
//    List<Messages> receivedmsg = new ArrayList<>();

    /**
     * A list of groups that the user is an admin of.
     * This is a one-to-many relationship with the {@link Groups} entity.
     */
    @OneToMany(mappedBy = "admin")
    List<Groups> groups = new ArrayList<>();

    // Getters and Setters...

    /**
     * Retrieves the unique identifier of the user.
     *
     * @return the unique identifier for the user
     */
    public int getUserID() {
        return userID;
    }
    
    public void setUserID(int userID) {
  		this.userID = userID;
  	}

    /**
     * Retrieves the username of the user.
     *
     * @return the username of the user
     */
    public String getUsername() {
        return username;
    }

    /**
     * Sets the username of the user.
     *
     * @param username the username to set for the user
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Retrieves the email of the user.
     *
     * @return the email of the user
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email of the user.
     *
     * @param email the email to set for the user
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Retrieves the password of the user.
     *
     * @return the password of the user
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the password of the user.
     *
     * @param password the password to set for the user
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Retrieves the profile picture of the user.
     *
     * @return the profile picture of the user
     */
    public String getProfile_picture() {
        return profile_picture;
    }

    /**
     * Sets the profile picture of the user.
     *
     * @param profile_picture the profile picture to set for the user
     */
    public void setProfile_picture(String profile_picture) {
        this.profile_picture = profile_picture;
    }

    /**
     * Retrieves the list of posts created by the user.
     *
     * @return the list of posts created by the user
     */
    public List<Posts> getPosts() {
        return posts;
    }

    /**
     * Sets the list of posts created by the user.
     *
     * @param posts the list of posts to set for the user
     */
    public void setPosts(List<Posts> posts) {
        this.posts = posts;
    }

    /**
     * Retrieves the set of friends sent by the user.
     *
     * @return the set of friends sent by the user
     */
//    public Set<Friends> getFriendsent() {
//        return friendsent;
//    }

    /**
     * Sets the set of friends sent by the user.
     *
     * @param friendsent the set of friends to set for the user
     */
//    public void setFriendsent(Set<Friends> friendsent) {
//        this.friendsent = friendsent;
//    }

    /**
     * Retrieves the set of friends received by the user.
     *
     * @return the set of friends received by the user
     */
//    public Set<Friends> getFriendsrec() {
//        return friendsrec;
//    }

    /**
     * Sets the set of friends received by the user.
     *
     * @param friendsrec the set of friends to set for the user
     */
//    public void setFriendsrec(Set<Friends> friendsrec) {
//        this.friendsrec = friendsrec;
//    }

    /**
     * Retrieves the list of comments made by the user.
     *
     * @return the list of comments made by the user
     */
    public List<Comments> getComments() {
        return comments;
    }

    /**
     * Sets the list of comments made by the user.
     *
     * @param comments the list of comments to set for the user
     */
    public void setComments(List<Comments> comments) {
        this.comments = comments;
    }

    /**
     * Retrieves the list of notifications for the user.
     *
     * @return the list of notifications for the user
     */
//    public List<Notifications> getNotification() {
//        return notification;
//    }

    /**
     * Sets the list of notifications for the user.
     *
     * @param notification the list of notifications to set for the user
     */
//    public void setNotification(List<Notifications> notification) {
//        this.notification = notification;
//    }

    /**
     * Retrieves the list of likes made by the user.
     *
     * @return the list of likes made by the user
     */
    public List<Likes> getLikes() {
        return likes;
    }

    /**
     * Sets the list of likes made by the user.
     *
     * @param likes the list of likes to set for the user
     */
    public void setLikes(List<Likes> likes) {
        this.likes = likes;
    }

    /**
     * Retrieves the list of groups where the user is an admin.
     *
     * @return the list of groups where the user is an admin
     */
    public List<Groups> getGroups() {
        return groups;
    }

    /**
     * Sets the list of groups where the user is an admin.
     *
     * @param groups the list of groups to set for the user
     */
    public void setGroups(List<Groups> groups) {
        this.groups = groups;
    }

    /**
     * Retrieves the list of messages sent by the user.
     *
     * @return the list of messages sent by the user
     */
//    public List<Messages> getSentmsg() {
//        return sentmsg;
//    }

    /**
     * Sets the list of messages sent by the user.
     *
     * @param sentmsg the list of messages to set for the user
     */
//    public void setSentmsg(List<Messages> sentmsg) {
//        this.sentmsg = sentmsg;
//    }

    /**
     * Retrieves the list of messages received by the user.
     *
     * @return the list of messages received by the user
     */
//    public List<Messages> getReceivedmsg() {
//        return receivedmsg;
//    }

    /**
     * Sets the list of messages received by the user.
     *
     * @param receivedmsg the list of messages to set for the user
     */
//    public void setReceivedmsg(List<Messages> receivedmsg) {
//        this.receivedmsg = receivedmsg;
//    }

    /**
     * Sets the unique identifier for the user.
     *
     * @param userID the unique identifier to set for the user
     */
    public void setID(int userID) {
        this.userID = userID;
    }

    /**
     * Sets the username for the user.
     *
     * @param username the username to set for the user
     */
    public void setName(String username) {
        this.username = username;
    }

	
}
