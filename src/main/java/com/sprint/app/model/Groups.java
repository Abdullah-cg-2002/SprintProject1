package com.sprint.app.model;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;

/**
 * Entity class representing a Group in the application.
 * The Group contains information about the group name, group ID, and the admin associated with the group.
 * This class is mapped to the `Groups` table in the database.
 */
@Entity
@Table(name = "`Groups`")
public class Groups {

    /**
     * The unique identifier for the group.
     * This field is auto-generated by the database using the strategy {@link GenerationType.IDENTITY}.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int groupID;

    /**
     * The name of the group. This field must not be blank and cannot exceed 500 characters.
     */
    @NotBlank(message = "Group name cannot be blank")
    @Size(max = 500, message = "Group name should not exceed 500 characters")
    private String groupName;

    /**
     * The admin of the group. This is a reference to a {@link Users} entity.
     * The admin of the group is mapped via the foreign key `adminID` that references the `userID` column in the `Users` table.
     * The admin field is ignored during serialization to JSON using the {@link JsonIgnore} annotation.
     */
    @ManyToOne
    @JoinColumn(name = "adminID", referencedColumnName = "userID")
    @JsonIgnore
    private Users admin;


    /**
     * Retrieves the unique identifier of the group.
     *
     * @return the unique identifier for the group
     */
    public int getGroupID() {
        return groupID;
    }

    /**
     * Sets the unique identifier for the group.
     *
     * @param groupID the unique identifier for the group to set
     */
    public void setGroupID(int groupID) {
        this.groupID = groupID;
    }

    /**
     * Retrieves the name of the group.
     *
     * @return the name of the group
     */
    public String getGroupName() {
        return groupName;
    }

    /**
     * Sets the name of the group.
     *
     * @param groupName the name of the group to set
     */
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    /**
     * Retrieves the admin of the group.
     *
     * @return the admin of the group, represented as a {@link Users} entity
     */
    public Users getAdmin() {
        return admin;
    }

    /**
     * Sets the admin of the group.
     *
     * @param admin the admin to set for the group, represented as a {@link Users} entity
     */
    public void setAdmin(Users admin) {
        this.admin = admin;
    }

	
}
