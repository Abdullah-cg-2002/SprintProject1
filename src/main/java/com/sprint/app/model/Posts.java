package com.sprint.app.model;

import java.time.LocalDateTime;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

/**
 * Represents a Post entity in the system.
 * A post contains content, timestamp, and references to the user who created it.
 * It can have associated comments and likes.
 * The Post entity is mapped to a table in the database.
 */
@Entity
public class Posts {

    /**
     * The unique identifier for the post.
     * This field is auto-generated by the database using the strategy {@link GenerationType.IDENTITY}.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int postID;

    /**
     * The content of the post. It must not be blank and should not exceed 500 characters.
     */
    @NotBlank(message = "Content cannot be blank")
    @Size(max = 500, message = "Content should not exceed 500 characters")
    private String content;

    /**
     * The timestamp of when the post was created.
     * This field is automatically set to the current time when the post is created.
     */
    private LocalDateTime timestamp;

    /**
     * The user who created the post. This is a reference to a {@link Users} entity.
     * The user is linked to the post through a many-to-one relationship.
     * The field is ignored during serialization to JSON using the {@link JsonIgnore} annotation.
     */
    @ManyToOne
    @JoinColumn(name = "userID")
    @JsonIgnore
    private Users user;

    /**
     * A list of comments associated with the post. 
     * This is a one-to-many relationship with the {@link Comments} entity.
     * The comments are automatically cascaded when the post is saved or deleted.
     * The field is ignored during serialization to JSON using the {@link JsonIgnore} annotation.
     */
    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL)
    @JsonIgnore
    private List<Comments> comments;

    /**
     * A list of likes associated with the post. 
     * This is a one-to-many relationship with the {@link Likes} entity.
     * The likes are automatically cascaded when the post is saved or deleted.
     * The field is ignored during serialization to JSON using the {@link JsonIgnore} annotation.
     */
    @OneToMany(mappedBy = "posts", cascade = CascadeType.ALL)
    @JsonIgnore
    private List<Likes> likes;


    /**
     * Default constructor for the Post entity.
     * The constructor automatically sets the timestamp to the current time when a new post is created.
     */
    public Posts() {
        this.timestamp = LocalDateTime.now();  // Set the timestamp to the current time
    }

    /**
     * Retrieves the unique identifier of the post.
     *
     * @return the unique identifier for the post
     */
    public int getPostID() {
        return postID;
    }

    /**
     * Retrieves the content of the post.
     *
     * @return the content of the post
     */
    public String getContent() {
        return content;
    }

    /**
     * Sets the content of the post.
     *
     * @param content the content to set for the post
     */
    public void setContent(String content) {
        this.content = content;
    }

    /**
     * Retrieves the timestamp of when the post was created.
     *
     * @return the timestamp of the post
     */
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    /**
     * Retrieves the user who created the post.
     *
     * @return the user who created the post, represented as a {@link Users} entity
     */
    public Users getUser() {
        return user;
    }

    /**
     * Sets the user who created the post.
     *
     * @param user the user who created the post, represented as a {@link Users} entity
     */
    public void setUser(Users user) {
        this.user = user;
    }

    /**
     * Retrieves the list of comments associated with the post.
     *
     * @return the list of comments for the post, represented as a list of {@link Comments} entities
     */
    public List<Comments> getComments() {
        return comments;
    }

    /**
     * Sets the list of comments associated with the post.
     *
     * @param comments the list of comments to set for the post, represented as a list of {@link Comments} entities
     */
    public void setComments(List<Comments> comments) {
        this.comments = comments;
    }

    /**
     * Retrieves the list of likes associated with the post.
     *
     * @return the list of likes for the post, represented as a list of {@link Likes} entities
     */
    public List<Likes> getLikes() {
        return likes;
    }

    /**
     * Sets the list of likes associated with the post.
     *
     * @param likes the list of likes to set for the post, represented as a list of {@link Likes} entities
     */
    public void setLikes(List<Likes> likes) {
        this.likes = likes;
    }

    /**
     * Sets the unique identifier for the post.
     *
     * @param postID the unique identifier to set for the post
     */
	public void setPostID(int postID) {
		this.postID = postID;
	}
	
}
